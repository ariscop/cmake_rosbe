From addacce48d1509f6d12f02c135f21d57aa1a18ba Mon Sep 17 00:00:00 2001
From: Ben Boeckel <mathstuf@gmail.com>
Date: Mon, 10 Mar 2014 21:08:38 -0400
Subject: [PATCH 09/17] ninja: Factor out target-level definitions

Worth another 3M in the WebKit build.ninja file.

This work is based on Ben Boeckel's experiments in https://github.com/mathstuf/CMake/commits/dev/output-target-flags-once-in-ninja
---
 Source/cmNinjaTargetGenerator.cxx | 45 ++++++++++++++++++++++++-------
 Source/cmNinjaTargetGenerator.h   |  2 ++
 2 files changed, 37 insertions(+), 10 deletions(-)

diff --git a/Source/cmNinjaTargetGenerator.cxx b/Source/cmNinjaTargetGenerator.cxx
index 26fbd3793..b31cc1df7 100644
--- a/Source/cmNinjaTargetGenerator.cxx
+++ b/Source/cmNinjaTargetGenerator.cxx
@@ -137,6 +137,16 @@ cmNinjaTargetGenerator::FlagVariableForTarget(std::string const& lang)
   return "cmake_flags_target_" + targetName + "_lang_" + lang;
 }
 
+std::string
+cmNinjaTargetGenerator::DefineVariableForTarget(std::string const& lang)
+{
+  std::string targetName = this->GetTargetName();
+  // '.' is not allowed in variable names, so escape them.
+  cmSystemTools::ReplaceString(targetName, "dot", "dotdot_");
+  cmSystemTools::ReplaceString(targetName, ".", "dot_");
+  return "cmake_defines_target_" + targetName + "_lang_" + lang;
+}
+
 std::string
 cmNinjaTargetGenerator::ComputeFlagsForTarget(const std::string& language)
 {
@@ -190,6 +200,28 @@ cmNinjaTargetGenerator::ComputeFlagsForTarget(const std::string& language)
   return languageFlags;
 }
 
+std::string
+cmNinjaTargetGenerator::ComputeDefinesForTarget(const std::string& language)
+{
+  std::set<std::string> targetDefines;
+
+  // Add the export symbol definition for shared library objects.
+  if(const char* exportMacro = this->Target->GetExportMacro())
+    {
+    this->LocalGenerator->AppendDefines(targetDefines, exportMacro);
+    }
+
+  // Add preprocessor definitions for this target and configuration.
+  this->LocalGenerator->AddCompileDefinitions(targetDefines, this->Target,
+                                             this->GetConfigName());
+
+  std::string targetDefinesString;
+  this->LocalGenerator->JoinDefines(targetDefines, targetDefinesString,
+     language);
+
+  return targetDefinesString;
+}
+
 // TODO: Most of the code is picked up from
 // void cmMakefileExecutableTargetGenerator::WriteExecutableRule(bool relink),
 // void cmMakefileTargetGenerator::WriteTargetLanguageFlags()
@@ -239,15 +271,6 @@ ComputeDefines(cmSourceFile const* source, const std::string& language)
 {
   std::set<std::string> defines;
 
-  // Add the export symbol definition for shared library objects.
-  if(const char* exportMacro = this->Target->GetExportMacro())
-    {
-    this->LocalGenerator->AppendDefines(defines, exportMacro);
-    }
-
-  // Add preprocessor definitions for this target and configuration.
-  this->LocalGenerator->AddCompileDefinitions(defines, this->Target,
-                                             this->GetConfigName());
   this->LocalGenerator->AppendDefines
     (defines,
      source->GetProperty("COMPILE_DEFINITIONS"));
@@ -259,7 +282,7 @@ ComputeDefines(cmSourceFile const* source, const std::string& language)
      source->GetProperty(defPropName));
   }
 
-  std::string definesString;
+  std::string definesString = "$" + this->DefineVariableForTarget(language);
   this->LocalGenerator->JoinDefines(defines, definesString,
      language);
 
@@ -600,6 +623,8 @@ cmNinjaTargetGenerator
     {
     targetVars[this->FlagVariableForTarget(*l)] =
       this->ComputeFlagsForTarget(*l);
+    targetVars[this->DefineVariableForTarget(*l)] =
+      this->ComputeDefinesForTarget(*l);
     }
 
   for(cmNinjaVars::const_iterator i = targetVars.begin();
diff --git a/Source/cmNinjaTargetGenerator.h b/Source/cmNinjaTargetGenerator.h
index 2707bcd9c..9b86b9d6a 100644
--- a/Source/cmNinjaTargetGenerator.h
+++ b/Source/cmNinjaTargetGenerator.h
@@ -76,9 +76,11 @@ protected:
 
   std::string OrderDependsTargetForTarget();
   std::string FlagVariableForTarget(std::string const& lang);
+  std::string DefineVariableForTarget(std::string const& lang);
 
   std::string ComputeOrderDependsForTarget();
   std::string ComputeFlagsForTarget(const std::string& language);
+  std::string ComputeDefinesForTarget(const std::string& language);
 
   /**
    * Compute the flags for compilation of object files for a given @a language.
-- 
2.17.1

