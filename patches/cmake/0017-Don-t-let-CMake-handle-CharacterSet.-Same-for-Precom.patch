From 2d5a17d15f032cccfd278d4aae9eea9035bfc068 Mon Sep 17 00:00:00 2001
From: Amine Khaldi <amine.khaldi@reactos.org>
Date: Sun, 22 Mar 2015 16:45:28 +0100
Subject: [PATCH 17/17] Don't let CMake handle CharacterSet. Same for
 PrecompiledHeader, SubSystem, ImportLibrary, RandomizedBaseAddress,
 DataExecutionPrevention and EnableUAC. We handle these on our own.

---
 Source/cmVisualStudio10TargetGenerator.cxx | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/Source/cmVisualStudio10TargetGenerator.cxx b/Source/cmVisualStudio10TargetGenerator.cxx
index 4f3b9639e..d74544b80 100644
--- a/Source/cmVisualStudio10TargetGenerator.cxx
+++ b/Source/cmVisualStudio10TargetGenerator.cxx
@@ -723,6 +723,8 @@ void cmVisualStudio10TargetGenerator
     {
     this->WriteString("<CharacterSet>Unicode</CharacterSet>\n", 2);
     }
+  else this->WriteString("<CharacterSet>NotSet</CharacterSet>\n", 2);
+#if 0
   else if (this->Target->GetType() <= cmTarget::MODULE_LIBRARY &&
            this->ClOptions[config]->UsingSBCS())
     {
@@ -732,6 +734,7 @@ void cmVisualStudio10TargetGenerator
     {
     this->WriteString("<CharacterSet>MultiByte</CharacterSet>\n", 2);
     }
+#endif
   if(const char* toolset = gg->GetPlatformToolset())
     {
     std::string pts = "<PlatformToolset>";
@@ -1879,7 +1882,10 @@ bool cmVisualStudio10TargetGenerator::ComputeClOptions(
   if(this->MSTools)
     {
     clOptions.FixExceptionHandlingDefault();
+    clOptions.AddFlag("RuntimeLibrary", "");
+#if 0
     clOptions.AddFlag("PrecompiledHeader", "NotUsing");
+#endif
     std::string asmLocation = configName + "/";
     clOptions.AddFlag("AssemblerListingLocation", asmLocation.c_str());
     }
@@ -2352,10 +2358,12 @@ cmVisualStudio10TargetGenerator::ComputeLinkOptions(std::string const& config)
             }
           }
         }
+#if 0
       else
         {
         linkOptions.AddFlag("SubSystem", "Windows");
         }
+#endif
       }
     else
       {
@@ -2374,10 +2382,12 @@ cmVisualStudio10TargetGenerator::ComputeLinkOptions(std::string const& config)
             }
           }
         }
+#if 0
       else
         {
         linkOptions.AddFlag("SubSystem", "Console");
         };
+#endif
       }
 
     if(const char* stackVal =
@@ -2397,12 +2407,16 @@ cmVisualStudio10TargetGenerator::ComputeLinkOptions(std::string const& config)
     std::string pdb = this->Target->GetPDBDirectory(config.c_str());
     pdb += "/";
     pdb += targetNamePDB;
+#if 0
     std::string imLib = this->Target->GetDirectory(config.c_str(), true);
     imLib += "/";
     imLib += targetNameImport;
 
     linkOptions.AddFlag("ImportLibrary", imLib.c_str());
+#endif
     linkOptions.AddFlag("ProgramDataBaseFile", pdb.c_str());
+    linkOptions.AddFlag("RandomizedBaseAddress", "");
+    linkOptions.AddFlag("DataExecutionPrevention", "");
 
     // A Windows Runtime component uses internal .NET metadata,
     // so does not have an import library.
@@ -2461,6 +2475,7 @@ cmVisualStudio10TargetGenerator::WriteLinkOptions(std::string const& config)
   this->WriteString("<Link>\n", 2);
 
   linkOptions.OutputAdditionalOptions(*this->BuildFileStream, "      ", "");
+  linkOptions.AddFlag("EnableUAC", "");
   linkOptions.OutputFlagMap(*this->BuildFileStream, "      ");
 
   this->WriteString("</Link>\n", 2);
-- 
2.17.1

