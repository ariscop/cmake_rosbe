From 78862f03ab5d6d544127b38bdefdbec3e7ccd98c Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Mon, 10 Mar 2014 18:34:16 -0400
Subject: [PATCH 08/17] ninja: Store target-level flags in a variable

This greatly reduces the size of Ninja files projects with lots of flags
and lots of source files in libraries. ParaView goes from 110M to about
58M.

This work is based on Ben Boeckel's experiments in https://github.com/mathstuf/CMake/commits/dev/output-target-flags-once-in-ninja
---
 Source/cmNinjaTargetGenerator.cxx | 64 ++++++++++++++++++++++++-------
 Source/cmNinjaTargetGenerator.h   |  2 +
 2 files changed, 53 insertions(+), 13 deletions(-)

diff --git a/Source/cmNinjaTargetGenerator.cxx b/Source/cmNinjaTargetGenerator.cxx
index 81a70b364..26fbd3793 100644
--- a/Source/cmNinjaTargetGenerator.cxx
+++ b/Source/cmNinjaTargetGenerator.cxx
@@ -127,21 +127,19 @@ cmNinjaTargetGenerator::OrderDependsTargetForTarget()
   return "cmake_order_depends_target_" + this->GetTargetName();
 }
 
-// TODO: Most of the code is picked up from
-// void cmMakefileExecutableTargetGenerator::WriteExecutableRule(bool relink),
-// void cmMakefileTargetGenerator::WriteTargetLanguageFlags()
-// Refactor it.
 std::string
-cmNinjaTargetGenerator::ComputeFlagsForObject(cmSourceFile const* source,
-                                              const std::string& language)
+cmNinjaTargetGenerator::FlagVariableForTarget(std::string const& lang)
 {
-  // TODO: Fortran support.
-  // // Fortran-specific flags computed for this target.
-  // if(*l == "Fortran")
-  //   {
-  //   this->AddFortranFlags(flags);
-  //   }
+  std::string targetName = this->GetTargetName();
+  // '.' is not allowed in variable names, so escape them.
+  cmSystemTools::ReplaceString(targetName, "dot", "dotdot_");
+  cmSystemTools::ReplaceString(targetName, ".", "dot_");
+  return "cmake_flags_target_" + targetName + "_lang_" + lang;
+}
 
+std::string
+cmNinjaTargetGenerator::ComputeFlagsForTarget(const std::string& language)
+{
   bool hasLangCached = this->LanguageFlags.count(language) != 0;
   std::string& languageFlags = this->LanguageFlags[language];
   if(!hasLangCached)
@@ -189,7 +187,25 @@ cmNinjaTargetGenerator::ComputeFlagsForObject(cmSourceFile const* source,
                                             this->GetConfigName());
     }
 
-  std::string flags = languageFlags;
+  return languageFlags;
+}
+
+// TODO: Most of the code is picked up from
+// void cmMakefileExecutableTargetGenerator::WriteExecutableRule(bool relink),
+// void cmMakefileTargetGenerator::WriteTargetLanguageFlags()
+// Refactor it.
+std::string
+cmNinjaTargetGenerator::ComputeFlagsForObject(cmSourceFile const* source,
+                                              const std::string& language)
+{
+  // TODO: Fortran support.
+  // // Fortran-specific flags computed for this target.
+  // if(*l == "Fortran")
+  //   {
+  //   this->AddFortranFlags(flags);
+  //   }
+
+  std::string flags = "$" + this->FlagVariableForTarget(language);
 
   // Add source file specific flags.
   this->LocalGenerator->AppendFlags(flags,
@@ -568,8 +584,30 @@ cmNinjaTargetGenerator
                                                 cmNinjaDeps(),
                                                 orderOnlyDeps);
     }
+
+  std::set<std::string> langs;
   std::vector<cmSourceFile const*> objectSources;
   this->GeneratorTarget->GetObjectSources(objectSources, config);
+  for(std::vector<cmSourceFile const*>::const_iterator
+        si = objectSources.begin(); si != objectSources.end(); ++si)
+    {
+    langs.insert((*si)->GetLanguage());
+    }
+
+  cmNinjaVars targetVars;
+  for (std::set<std::string>::const_iterator l = langs.begin();
+       l != langs.end(); ++l)
+    {
+    targetVars[this->FlagVariableForTarget(*l)] =
+      this->ComputeFlagsForTarget(*l);
+    }
+
+  for(cmNinjaVars::const_iterator i = targetVars.begin();
+      i != targetVars.end(); ++i)
+    cmGlobalNinjaGenerator::WriteVariable(this->GetBuildFileStream(),
+                                          i->first, i->second, "", 0);
+  this->GetBuildFileStream() << std::endl;
+
   for(std::vector<cmSourceFile const*>::const_iterator
         si = objectSources.begin(); si != objectSources.end(); ++si)
     {
diff --git a/Source/cmNinjaTargetGenerator.h b/Source/cmNinjaTargetGenerator.h
index 5733fde4c..2707bcd9c 100644
--- a/Source/cmNinjaTargetGenerator.h
+++ b/Source/cmNinjaTargetGenerator.h
@@ -75,8 +75,10 @@ protected:
   void AddFeatureFlags(std::string& flags, const std::string& lang);
 
   std::string OrderDependsTargetForTarget();
+  std::string FlagVariableForTarget(std::string const& lang);
 
   std::string ComputeOrderDependsForTarget();
+  std::string ComputeFlagsForTarget(const std::string& language);
 
   /**
    * Compute the flags for compilation of object files for a given @a language.
-- 
2.17.1

